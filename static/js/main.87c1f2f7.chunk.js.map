{"version":3,"sources":["components/Inputs.js","components/DropdownList.js","App.js","index.js"],"names":["Inputs","props","Input","className","onChange","handleChange","type","name","value","DropdownList","allUnits","map","item","key","text","Dropdown","placeholder","selection","options","this","handleTypeChange","unitTypes","handleUnitChange","console","log","React","Component","App","state","valueOne","valueTwo","unitOne","unitTwo","measurementType","convert","measures","possibilities","handleConvert","field","setState","from","to","e","target","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87c1f2f7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Input } from \"semantic-ui-react\";\n\nconst Inputs = props => {\n  return (\n    <Input\n      // placeholder={props.name}\n      className=\"number-input\"\n      onChange={props.handleChange}\n      type=\"number\"\n      name={props.name}\n      value={props.value}\n    />\n  );\n};\n\nexport default Inputs;\n","import React from \"react\";\n\nimport { Dropdown } from \"semantic-ui-react\";\nimport \"./DropdownList.css\";\nclass DropdownList extends React.Component {\n  allUnits = this.props.allUnits.map(item => ({\n    key: item,\n    text: item,\n    value: item\n  }));\n\n  render() {\n    return (\n      <div>\n        <Dropdown\n          placeholder=\"Measurement Type\"\n          selection\n          className=\"type-select\"\n          options={this.allUnits}\n          onChange={this.props.handleTypeChange}\n        />\n        <div>\n          <Dropdown\n            placeholder=\"Select Unit\"\n            selection\n            name=\"unitOne\"\n            className=\"unit-select\"\n            options={this.props.unitTypes}\n            onChange={this.props.handleUnitChange}\n          />\n          <Dropdown\n            placeholder=\"Select Unit\"\n            selection\n            name=\"unitTwo\"\n            className=\"unit-select\"\n            options={this.props.unitTypes}\n            onChange={this.props.handleUnitChange}\n          />\n        </div>\n        {console.log(\"render\")}\n      </div>\n    );\n  }\n}\n\nexport default DropdownList;\n","import React from \"react\";\r\n\r\nimport convert from \"convert-units\";\r\nimport Inputs from \"./components/Inputs\";\r\nimport DropdownList from \"./components/DropdownList\";\r\nimport \"./index.css\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    valueOne: null,\r\n    valueTwo: null,\r\n    unitOne: null,\r\n    unitTwo: null,\r\n    measurementType: \"\",\r\n    unitTypes: []\r\n  };\r\n\r\n  allUnits = convert().measures();\r\n  unitTypes = convert(this.state.measurementType).possibilities();\r\n\r\n  // converts other input field\r\n  handleConvert = field => {\r\n    if (\r\n      (this.state.valueOne !== null || this.state.valueTwo !== null) &&\r\n      this.state.unitOne !== null &&\r\n      this.state.unitTwo !== null\r\n    ) {\r\n      if (field === \"One\") {\r\n        this.setState({\r\n          valueTwo: convert(this.state.valueOne)\r\n            .from(this.state.unitOne)\r\n            .to(this.state.unitTwo)\r\n        });\r\n      } else if (field === \"Two\") {\r\n        this.setState({\r\n          valueOne: convert(this.state.valueTwo)\r\n            .from(this.state.unitTwo)\r\n            .to(this.state.unitOne)\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // change what is entered in the input fields\r\n  handleChange = e => {\r\n    if (e.target.name === \"fieldOne\") {\r\n      this.setState(\r\n        {\r\n          valueOne: e.target.value\r\n        },\r\n        () => this.handleConvert(\"One\")\r\n      );\r\n    } else if (e.target.name === \"fieldTwo\") {\r\n      this.setState(\r\n        {\r\n          valueTwo: e.target.value\r\n        },\r\n        () => this.handleConvert(\"Two\")\r\n      );\r\n    }\r\n  };\r\n\r\n  // change measurement type\r\n  handleTypeChange = (e, data) => {\r\n    let temp = convert().possibilities(`${data.value}`);\r\n    let unitTypes = temp.map(item => ({\r\n      key: item,\r\n      text: item,\r\n      value: item\r\n    }));\r\n\r\n    this.setState({\r\n      measurementType: data.value,\r\n      unitTypes: unitTypes,\r\n      unitOne: null,\r\n      unitTwo: null\r\n    });\r\n  };\r\n\r\n  // change the first/second unit\r\n  handleUnitChange = (e, data) => {\r\n    if (data.name === \"unitOne\") {\r\n      this.setState(\r\n        {\r\n          unitOne: data.value\r\n        },\r\n        () => this.handleConvert(\"One\")\r\n      );\r\n    } else if (data.name === \"unitTwo\") {\r\n      this.setState(\r\n        {\r\n          unitTwo: data.value\r\n        },\r\n        () => this.handleConvert(\"Two\")\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Unit Converter</h2>\r\n\r\n        <div>\r\n          <DropdownList\r\n            allUnits={this.allUnits}\r\n            handleTypeChange={this.handleTypeChange}\r\n            handleUnitChange={this.handleUnitChange}\r\n            measurementType={this.state.measurementType}\r\n            unitTypes={this.state.unitTypes}\r\n            unitOne={this.state.unitOne}\r\n            unitTwo={this.state.unitTwo}\r\n          />\r\n          {console.log(this.state.measurementType)}\r\n          {console.log(this.state.unitTypes)}\r\n        </div>\r\n        <div>\r\n          <Inputs\r\n            handleChange={this.handleChange}\r\n            name=\"fieldOne\"\r\n            value={this.state.valueOne}\r\n          />\r\n          <Inputs\r\n            handleChange={this.handleChange}\r\n            name=\"fieldTwo\"\r\n            value={this.state.valueTwo}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n// import \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}